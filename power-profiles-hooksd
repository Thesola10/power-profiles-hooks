#!/usr/bin/env python3
# power-profiles-hooks by Karim Vergnes <me@thesola.io>
# D-Bus listener for power-profiles-daemon
# Licensed under Creative Commons Zero

import dbus
import os

from gi.repository      import GLib
from dbus.mainloop.glib import DBusGMainLoop

SENDER = "net.hadess.PowerProfiles"
OBJECT = "/net/hadess/PowerProfiles"
IFACE = "org.freedesktop.DBus.Properties"

PREFIXES = ['/etc','/usr/local/etc']

iface: dbus.Interface
bus: dbus.Bus

oldprof = ""

def runhooks(prof):
    for pr in PREFIXES:
        if os.path.isdir(f"{pr}/power-profiles.d/{prof}"):
            for hk in os.listdir(f"{pr}/power-profiles.d/{prof}"):
                os.system(f"{pr}/power-profiles.d/{prof}/{hk}")


def handle_lock(msg):
    locks = msg.get_args_list()[1]
    maxprof = "performance"
    if "ActiveProfileHolds" in locks.keys():
        # After some testing, I found that power-saver locks always win
        # over performance locks, regardless of order or concurrency.
        for lk in locks["ActiveProfileHolds"]:
            if lk["Profile"] == "power-saver":
                maxprof = "power-saver"
        # No remaining hooks.
        if len(locks["ActiveProfileHolds"]) == 0:
            maxprof = oldprof

        runhooks(maxprof)

def handle_change(msg):
    global oldprof
    newprof = msg.get_args_list()[2]
    runhooks(newprof)

    oldprof = newprof


def callback(bus, msg):
    if msg.get_interface() == IFACE and msg.get_member() == "Set":
        handle_change(msg)
    elif msg.get_interface() == IFACE and msg.get_member() == "PropertiesChanged":
        handle_lock(msg)

if __name__ == '__main__':
    DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()

    dbus_obj = dbus.Interface(
            bus.get_object('org.freedesktop.DBus', '/org/freedesktop/DBus'),
            'org.freedesktop.DBus.Monitoring')


    obj = bus.get_object(SENDER, OBJECT)
    iface = dbus.Interface(obj, IFACE)

    oldprof = iface.Get(SENDER, "ActiveProfile")

    print(f"Set profile at launch is '{oldprof}'")

    # Apply hooks for existing power profile
    runhooks(oldprof)

    # At this point we are no longer allowed to send D-Bus messages directly.
    dbus_obj.BecomeMonitor([f"path='{OBJECT}'"],
                           dbus.UInt32(0))

    bus.add_message_filter(callback)
    mainloop = GLib.MainLoop()
    mainloop.run()
